```{r}
# MAKE SURE THE WD IS THE ROOT PROJECT FOLDER

# Get the data
data.clinical <- read.delim("data_clinical_patient.txt", sep = "\t", header = TRUE, comment.char = "#")
data.mutation <- read.delim("data_mutations.txt", sep = "\t", header = TRUE, comment.char = "#")
data.expression <- read.delim("RNAseq_BRCA.csv", sep = ",", header = TRUE, comment.char = "#")
```

```{r}
# Build the patient-mutation matrix
mutation.patients <- unique(substr(data.mutation$Tumor_Sample_Barcode, 1, 12))
clinical.patients <- data.clinical$PATIENT_ID
expression.patients <- gsub("\\.", "-", substr(colnames(data.expression), 1, 12)[-1])

# Get the patients that we have full data for
unique.patients.full.data <- Reduce(intersect, list(mutation.patients, clinical.patients, expression.patients))

# Make a new column with the cleaned patient ID (same as other datasets)
data.mutation$Tumor_Sample_Barcode_Cleaned <- substr(data.mutation$Tumor_Sample_Barcode, 1, 12)

# Non-coding transcript exon variant?
important_mutations <- data.mutation[which(data.mutation$IMPACT %in% c("HIGH", "MODERATE")), ]

# Get the important mutations for full-data patients
important_mutations_full_data <- important_mutations[which(important_mutations$Tumor_Sample_Barcode_Cleaned %in% unique.patients.full.data), ]

feature_df <- important_mutations_full_data[c("Hugo_Symbol", "Tumor_Sample_Barcode_Cleaned"), ]

# Make feature matrix
feature_mat <- table(important_mutations_full_data$Tumor_Sample_Barcode_Cleaned, important_mutations_full_data$Hugo_Symbol)

# Turn into binary matrix
feature_mat[feature_mat > 1] <- 1
```

Clustering

Filter for the top ~20 mutated genes
```{r}
quantile(colSums(feature_mat), probs = 0.999)
```
Therefore, any genes with 51 or more mutations are in the 99.8th percentile.

```{r}
feature_mat_filtered <- feature_mat[, colSums(feature_mat) >= 51]
str(feature_mat_filtered)
```
The feature matrix before filtering had 16503 genes. This matrix has only the most mutated genes (>51 patients) and only has 17 genes.

```{r}
library(pheatmap)
reduce.mat <- t(feature_mat_filtered)
res <- pheatmap(reduce.mat,
         cluster_rows = F,
         show_colnames=FALSE)
```

Hierarchical clustering:

We performed hierarchical clustering on the filtered data using single linkage, average linkage, complete linkage and Ward linkage methods. The Ward method yielded the most evenly distributed clusters.
```{r}
set.seed(123)
dist_mat <- dist(feature_df_filtered, method = 'binary')
hclust_ward <- hclust(dist_mat, method = 'ward.D')
```
```{r}
cut_ward <- cutree(hclust_ward, h = 40)
plot(hclust_ward, main = "Hierarchical Clustering Dendogram")
rect.hclust(hclust_ward, h = 40, border = 2:6)
abline(h = 40, col = 'red')
```
```{r}
cluster.size <- table(cut_ward)
cluster.size
```
